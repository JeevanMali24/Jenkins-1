pipeline {
    agent any
    tools{
      jdk "jdk11"  
      maven "maven3"
    }
    
    environment{
        SCANNER_HOME= tool 'sonar-scanner'
    }

    stages {
        stage('git checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/jaiswaladi246/Ekart.git'
            }
        }
        stage('compile') {
            steps {
                sh "mvn clean compile"
            
            }
        }
        stage('sonarqube analysis') {
            steps {
                sh """ $SCANNER_HOME/bin/sonar-scanner -Dsonar.url=http://3.110.77.87:9000/ \
                        -Dsonar.login=squ_79caf9778af586204974fda42dd1a0713081cbf8 \
                        -Dsonar.projectName=ekart \
                        -Dsonar.java.binaries=. \
                        -Dsonar.projectKey=ekart """
            
            }
        }
        stage('OWASP SCAN') {
            steps {
               dependencyCheck additionalArguments: ' --scan ./', odcInstallation: 'DP'
               dependencyCheckPublisher pattern; '**/dependency-check-report.xml'
            }
        }
        stage('Buile & Push Docker Image') {
            steps {
                script{
                  // This step should not normally be used in your script. Consult the inline help for details.
                     withDockerRegistry(credentialsId: 'dockerid', toolName: 'Docker') {
                     sh 'docker build -t shopping:latest -f Docker/Dockerfile .'
                     sh 'docker tag shopping:latest adijaiswal/shopping:latest'
                     sh 'docker push yuvrajdocker001/shopping:latest'
                    }   
                }
            
            }
        }
        stage('Trigger CD Pipeline') {
            steps {
                build jobe: "CD_Pipeline" , wait: true
            
            }
        }
    }
}
